#!/usr/bin/env python
# coding: utf-8
# Copyright 2021 ARC Centre of Excellence for Climate Extremes
# author: Paola Petrelli <paola.petrelli@utas.edu.au>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import requests
import json
from datetime import date
from os.path import expanduser
import sys
from util import post_json, get_token, read_json


def process_contributor(contrib):
    """Rewrite authors and collaborators information following metadata scheme 
       Currently assumes input format is one generated by scraping geonetwork with 
       name, affiliation, role and org (True/False) attributes.

    Parameters
    ----------
    creator : dict 
        The contributor details 

    Returns
    -------
    contributor : dict
        A modified version of the author dictionary
    """
    creator = {}
    creator['affiliation'] = {'id': "", 'name': contrib['affiliation']}
    creator['role'] = contrib['role']
    if contrib['org'] == False:
        bits = contrib['name'].split()
        firstname = bits[:-1]
        surname = bits[-1] 
        creator['person_or_org'] = { 'family_name': surname,
                'given_name' : firstname,
                'name' : f"{surname}, {firstname}",
                'type' : 'personal',
                #'identifier' : [{'scheme': 'orcid', 'identifier': contrib['orcid'].split("/")[-1]}]
                }
    else:
        creator['person_or_org'] = { 'name': contrib['name'],
        'type': "organizational"} 
    return creator 


def process_time(period):
    """Process time range so it can be added to the dates metadata

    Parameters
    ----------
    period : list
        [From date, to date]

    Returns
    -------
    time_range : dict
        Dictionary following metadata schema for dates
    """

    time_range = {'date': f"{period[0]}/{period[1]}",
        'description': "Time period covered by data",
        #'type': { 'id': "coverage", 'title': {'en': "Temporal coverage"} }
        'type': { 'id': "accepted", 'title': {'en': "Accepted"} }
        }
    return time_range


def process_spatial(geo):
    """Process time range so it can be added to the dates metadata

    Parameters
    ----------
    geo : list
        [minLon, maxLon, minLat, maxLat]

    Returns
    -------
    time_range : dict(list)
        Dictionary following metadata schema for dates
    """

    polygon = { "type": "Polygon",
      "coordinates": [
      [ [geo[0], geo[2]], [geo[0], geo[3]], [geo[1], geo[3]], [geo[1], geo[2]] ]
      ]}
    return polygon 


def add_description(citation, location):
    """Create metadata for additional descriptions,
       currently one for local location and one for preferred citation

    Parameters
    ----------
    citation : str
        The preferred citation
    location : str
        Information on hpe to access data locally

    Returns
    -------
    descriptions : list(dict)
        List with the two addtional description dictionaries
    """

    descriptions = [
        { "description": citation,
        "lang": { "id": "eng", "title": {"en": "English"} },
        "type": { "id": "citation-access",
                  "title": {"en": "Citation and access information"} }
        },
        { "description": location,
        "lang": { "id": "eng", "title": {"en": "English"} },
        "type": { "id": "location", "title": {"en": "Local host"} }
        }]
    return descriptions


def process_license(license):
    """If license is Creative Common return the zenodo style string
       else return license as in plan

    Parameters
    ----------
    license : dict
        A string defining the license

    Returns
    -------
    zlicense : dict
        A modified version of the license dictionary following the api requirements
    """

    # not doing yet what it claims
    ind = license.find('Attribution')
    if ind == -1:
         print('check license for this record')
         zlicense = {'id': 'cc-by-4.0'}
    else:
        zlicense = {'id': license[0:ind].strip().replace(' ','-').lower() + '-4.0'}
    return zlicense


def process_plan(plan):
    """
    """
    metadata = {}
    # Contributors
    metadata['creators'] = []
    metadata['collaborators'] = []
    for p in plan['contributors']:
        contributor = process_contributor(p) 
        if p['role'] in ['author']:
            metadata['creators'].append( contributor )
        else:
            metadata['collaborators'].append( contributor )
    # Dates: publication date is required
    if plan['dates']['publication'] != "":
        metadata['publication_date'] = plan['dates']['publication']
    elif plan['dates']['creation'] != "":
        metadata['publication_date'] = plan['dates']['creation']
    else:
        metadata['publication_date'] = date.today().strftime('%Y-%m-%d') 
    metadata['dates'] = []
    metadata['dates'].append(process_time(plan['time_period']))
    # Titles, version, description
    metadata['title'] = plan['title']
    metadata['additional_titles'] = [{"title": plan['alt_title'], 
        "type": {"id": "alternative-title", "title": {"en": "Alternative title"}}}]
    # version not abvailable from geonetwork
    #metadata['version'] = plan['version']
    metadata['description'] = plan['description']
    # License, additional descriptions
    metadata['license'] = process_license(plan['license'])
    metadata['additional_descriptions'] = add_description(plan['citation'], plan['location'])

    # Geospatial info: build GeoJSON polygon
    metadata['locations'] = process_spatial(plan['geospatial'])

    #metadata['related_identifiers'] = process_related_id(plan)
    #if 'subjects' in metadata.keys():
    #    metadata['subjects'] = process_subjects(plan['subjects'])
    #metadata['doi'] = '/'.join(plan['doi'].split('/')[-2:])
    metadata['resource_type'] = {'id': 'dataset', 'title': "Dataset"}
    metadata['language'] = 'English'
    metadata['publisher'] = 'NCI Australia'
    final = {}
    final['metadata'] = metadata
    #final['modified'] = date.today().strftime("%Y-%m-%d")
    final['files'] = {'enabled': False, "order": []}
    final['access'] = {'record': "public", 'files': "public", 'status': "metadata-only",
                       'embargo': {'active': False, 'reason': None} }
    return final

def main():
    url_test = 'https://test.dmponline.cloud.edu.au/api'
    url_main = 'https://oneclimate.dmponline.cloud.edu.au/api'
    draft_upload = '/records' # POST
# 'Content-Type: application/json'

    get_record = '/records/{id}' # GET
    get_records = '/records' # GET
    get_record_user = '/user/records' # GET
    delete_draft = '/records/{id}/draft' # DELETE
    list_drafts_files = '/records/{id}/draft/files' # GET
    draft_files_upload = '/records/{id}/draft/files' # POST

    fname = sys.argv[1]
    # read geonetwork record exported as json
    plan = read_json(fname)
    record = process_plan(plan)
    token = 'L18nuuM1LrdF8mB5E7FEZ1tHfmMPUKhfN0lkD0FNgOJbiLACssXREyTQnfvW'
    r = post_json(url_main+draft_upload, token, record)
    print(r.status_code)

if __name__ == "__main__":
    main()
